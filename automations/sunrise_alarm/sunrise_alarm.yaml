- id: '1726382934116'
  alias: Sunrise Alarm
  description: Turn a light on based on detected motion and start before a specified alarm time, with distinct durations for each alarm stage.

  variables:
    start_before: 30
    target_light: light.bedroom_lights
    light_timeout: 0
    steps_per_minute: 12
    start_kelvin_temp: 2500
    target_kelvin_1: 3000
    max_brightness_1: 10
    target_kelvin_2: 4000
    max_brightness_2: 50
    target_kelvin_3: 6500
    max_brightness_3: 100

  trigger_variables:
    start_before: 30
  
  trigger:
    - platform: template
      value_template: "{{ now().timestamp() | timestamp_custom('%H:%M') == (state_attr('input_datetime.alarm1_time', 'timestamp') - (start_before*60)) | timestamp_custom('%H:%M', false) and is_state('input_boolean.alarm1_' ~ now().strftime('%A')|lower, 'on') and is_state('input_boolean.alarm1_state', 'on') }}"
    - platform: template
      value_template: "{{ now().timestamp() | timestamp_custom('%H:%M') == (state_attr('input_datetime.alarm2_time', 'timestamp') - (start_before*60)) | timestamp_custom('%H:%M', false) and is_state('input_boolean.alarm2_' ~ now().strftime('%A')|lower, 'on') and is_state('input_boolean.alarm2_state', 'on') }}"

  action:
    - service: light.turn_on
      data:
        color_temp_kelvin: "{{ start_kelvin_temp }}"
        brightness_pct: 1
        entity_id: "{{ target_light }}"
    - delay:
        seconds: 5

    # First run
    - variables:
        alarm_length: "{{ start_before * 0.4 }}"
        target_kelvin: "{{ target_kelvin_1 }}"
        start_kelvin: "{{ start_kelvin_temp }}"
        max_brightness_pct: "{{ max_brightness_1 }}"
        steps: "{{ alarm_length * steps_per_minute }}"
        min_brightness: "{% if states(target_light) == 'off' %}\n  3\n{% else %}\n  {{ state_attr(target_light, 'brightness') }}\n{% endif %}"
        max_brightness: "{{ max_brightness_pct * 2.55 }}"
        kelvin_step: "{{ (target_kelvin - start_kelvin) / steps }}"
        bright_step: "{{ (max_brightness - min_brightness) / steps }}"
        start_time: "{{ as_timestamp(now()) }}"
        individual_step: "{{ 60 / steps_per_minute }}"
    - repeat:
        until:
          - condition: or
            conditions:
              - condition: template
                value_template: '{{ is_state(target_light, ''off'') }}'
              - condition: template
                value_template: '{{ state_attr(target_light, ''brightness'') >= max_brightness }}'
              - condition: template
                value_template: '{{ (((as_timestamp(now()) - start_time) / individual_step) | round(0, "ceil")) > steps }}'
        sequence:
          - variables:
              steps_to_now: "{{ ((as_timestamp(now()) - start_time) / individual_step) |\n  round(0, \"ceil\") }}"
              brightness: '{{ min_brightness + (bright_step * steps_to_now) | round(0, ''ceil'') }}'
              kelvin: '{{ start_kelvin + (kelvin_step * steps_to_now) }}'
          - delay:
              seconds: '{{ individual_step }}'
          - if:
              - condition: template
                value_template: '{{ is_state(target_light, ''on'') }}'
            then:
              - service: light.turn_on
                target:
                  entity_id: '{{ target_light }}'
                data:
                  brightness: '{{ brightness }}'
                  color_temp_kelvin: '{{ kelvin }}'
                  transition: '{{ individual_step - 1 }}'

    # Second run
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ is_state(target_light, 'on') }}"
          sequence:
            - variables:
                alarm_length: "{{ start_before * 0.4 }}"
                target_kelvin: "{{ target_kelvin_2 }}"
                start_kelvin: "{{ target_kelvin_1 }}"
                max_brightness_pct: "{{ max_brightness_2 }}"
                steps: "{{ alarm_length * steps_per_minute }}"
                min_brightness: "{{ state_attr(target_light, 'brightness') }}"
                max_brightness: "{{ max_brightness_pct * 2.55 }}"
                kelvin_step: "{{ (target_kelvin - start_kelvin) / steps }}"
                bright_step: "{{ (max_brightness - min_brightness) / steps }}"
                start_time: "{{ as_timestamp(now()) }}"
                individual_step: "{{ 60 / steps_per_minute }}"
            - repeat:
                until:
                  - condition: or
                    conditions:
                      - condition: template
                        value_template: '{{ is_state(target_light, ''off'') }}'
                      - condition: template
                        value_template: '{{ state_attr(target_light, ''brightness'') >= max_brightness }}'
                      - condition: template
                        value_template: '{{ (((as_timestamp(now()) - start_time) / individual_step) | round(0, "ceil")) > steps }}'
                sequence:
                  - variables:
                      steps_to_now: "{{ ((as_timestamp(now()) - start_time) / individual_step) |\n  round(0, \"ceil\") }}"
                      brightness: '{{ min_brightness + (bright_step * steps_to_now) | round(0, ''ceil'') }}'
                      kelvin: '{{ start_kelvin + (kelvin_step * steps_to_now) }}'
                  - delay:
                      seconds: '{{ individual_step }}'
                  - if:
                      - condition: template
                        value_template: '{{ is_state(target_light, ''on'') }}'
                    then:
                      - service: light.turn_on
                        target:
                          entity_id: '{{ target_light }}'
                        data:
                          brightness: '{{ brightness }}'
                          color_temp_kelvin: '{{ kelvin }}'
                          transition: '{{ individual_step - 1 }}'

    # Third run
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ is_state(target_light, 'on') }}"
          sequence:
            - variables:
                alarm_length: "{{ start_before * 0.2 }}"
                target_kelvin: "{{ target_kelvin_3 }}"
                start_kelvin: "{{ target_kelvin_2 }}"
                max_brightness_pct: "{{ max_brightness_3 }}"
                steps: "{{ alarm_length * steps_per_minute }}"
                min_brightness: "{{ state_attr(target_light, 'brightness') }}"
                max_brightness: "{{ max_brightness_pct * 2.55 }}"
                kelvin_step: "{{ (target_kelvin - start_kelvin) / steps }}"
                bright_step: "{{ (max_brightness - min_brightness) / steps }}"
                start_time: "{{ as_timestamp(now()) }}"
                individual_step: "{{ 60 / steps_per_minute }}"
            - repeat:
                until:
                  - condition: or
                    conditions:
                      - condition: template
                        value_template: '{{ is_state(target_light, ''off'') }}'
                      - condition: template
                        value_template: '{{ state_attr(target_light, ''brightness'') >= max_brightness }}'
                      - condition: template
                        value_template: '{{ (((as_timestamp(now()) - start_time) / individual_step) | round(0, "ceil")) > steps }}'
                sequence:
                  - variables:
                      steps_to_now: "{{ ((as_timestamp(now()) - start_time) / individual_step) |\n  round(0, \"ceil\") }}"
                      brightness: '{{ min_brightness + (bright_step * steps_to_now) | round(0, ''ceil'') }}'
                      kelvin: '{{ start_kelvin + (kelvin_step * steps_to_now) }}'
                  - delay:
                      seconds: '{{ individual_step }}'
                  - if:
                      - condition: template
                        value_template: '{{ is_state(target_light, ''on'') }}'
                    then:
                      - service: light.turn_on
                        target:
                          entity_id: '{{ target_light }}'
                        data:
                          brightness: '{{ brightness }}'
                          color_temp_kelvin: '{{ kelvin }}'
                          transition: '{{ individual_step - 1 }}'

            # Final timeout check
            - if:
                - condition: and
                  conditions:
                    - condition: template
                      value_template: '{{ light_timeout != 0 }}'
                    - condition: template
                      value_template: '{{ is_state(target_light, ''on'') }}'
              then:
                - delay:
                    minutes: '{{ light_timeout }}'
                - service: light.turn_off
                  target:
                    entity_id: '{{ target_light }}'


  mode: parallel
  max: 10
